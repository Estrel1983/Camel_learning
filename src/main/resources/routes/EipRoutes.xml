<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://camel.apache.org/schema/spring
        http://camel.apache.org/schema/spring/camel-spring.xsd">
    <camel:routeContext id="eipRoutes">
        <camel:route>
            <camel:from uri="undertow:{{undertow.http}}/pollEnricher"/>
            <camel:pollEnrich timeout="0" aggregationStrategy="emailAggregator">
                <camel:constant>imaps://{{mail.host}}:{{mail.port}}?username={{mail.username}}&amp;password={{mail.password}}&amp;delete=false&amp;unseen=true&amp;folderName=Camel</camel:constant>
            </camel:pollEnrich>
        </camel:route>
        <camel:route>
            <camel:from uri="undertow:{{undertow.http}}/isArtistExistsEnricher"/>
            <camel:unmarshal>
                <camel:json library="Jackson"/>
            </camel:unmarshal>
            <camel:enrich aggregationStrategy="artistAggregation" aggregateOnException="true">
                <camel:constant>direct:getArtist</camel:constant>
            </camel:enrich>
            <camel:marshal>
                <camel:json library="Jackson"/>
            </camel:marshal>
        </camel:route>
<!--        <camel:route>-->
<!--            <camel:from uri="undertow:{{undertow.http}}/recipientList"/>-->
<!--            <camel:recipientList aggregationStrategy="stringAggregationStrategy">-->
<!--                <camel:method ref="recipientListResolver" method="getRecipientList"/>-->
<!--            </camel:recipientList>-->
<!--            <camel:log message="Result : ${body}"/>-->
<!--        </camel:route>-->
        <camel:route>
            <camel:from uri="undertow:{{undertow.http}}/recipientListAnnotated"/>
            <camel:bean ref="recipientListResolver"/>
            <camel:log message="Result : ${body}"/>
        </camel:route>
        <camel:route>
            <camel:from uri="undertow:{{undertow.http}}/pojoAggregation"/>
                <camel:multicast aggregationStrategy="pojoAggregator">
                    <camel:to uri="direct:firstDestination"/>
                    <camel:to uri="direct:secondDestination"/>
                    <camel:to uri="direct:thirdDestination"/>
                </camel:multicast>
            <camel:log message="Result : ${body}"/>
        </camel:route>
        <camel:route>
            <camel:from uri="undertow:{{undertow.http}}/multicastSharedState"/>
            <camel:setHeader name="forBody">
                <camel:constant>Starting message</camel:constant>
            </camel:setHeader>
            <camel:bean ref="bodySetter" method="setStringAsList"/>
            <camel:multicast parallelProcessing="true" aggregationStrategy="listAggregationStrategy"
                             onPrepare="prepareListForParallelProcessing">
                <camel:to uri="direct:listChanger"/>
                <camel:to uri="direct:listChanger"/>
                <camel:to uri="direct:listChanger"/>
            </camel:multicast>
            <camel:log message="Final Body is: ${body}"/>
            <camel:marshal>
                <camel:json library="Jackson"/>
            </camel:marshal>
        </camel:route>
        <camel:route>
            <camel:from uri="direct:listChanger"/>
            <camel:bean ref="bodySetter" method="setStringWithThreadAsList"/>
        </camel:route>
        <camel:route>
            <camel:from uri="undertow:{{undertow.http}}/multicast"/>
            <camel:multicast streaming="true" parallelProcessing="true" executorService="myExecutor"
                             aggregationStrategy="stringAggregationStrategy">
                <camel:to uri="direct:firstDestination"/>
                <camel:to uri="direct:secondDestination"/>
                <camel:to uri="direct:thirdDestination"/>
            </camel:multicast>
            <camel:log message="Result : ${body}"/>
        </camel:route>
        <camel:route>
            <camel:from uri="undertow:{{undertow.http}}/multicastWithException"/>
            <camel:multicast stopOnException="true" aggregationStrategy="stringAggregationStrategy">
                <camel:to uri="direct:firstDestination"/>
                <camel:to uri="direct:brokenDestination"/>
                <camel:to uri="direct:thirdDestination"/>
            </camel:multicast>
        </camel:route>
        <camel:route>
            <camel:from uri="undertow:{{undertow.http}}/multicastWithDelay"/>
            <camel:multicast parallelProcessing="true" streaming="true" aggregationStrategy="stringAggregationStrategy"
                             timeout="300">
                <camel:to uri="direct:firstDestination"/>
                <camel:to uri="direct:delayDestination"/>
                <camel:to uri="direct:thirdDestination"/>
            </camel:multicast>
            <camel:log message="Result : ${body}"/>
        </camel:route>
        <camel:route>
            <camel:from uri="direct:delayDestination"/>
            <camel:delay>
                <camel:constant>600</camel:constant>
            </camel:delay>
            <camel:log message="This is route with delay"/>
            <camel:setBody>
                <camel:constant>Delay Body</camel:constant>
            </camel:setBody>
        </camel:route>
        <camel:route>
            <camel:from uri="direct:brokenDestination"/>
            <camel:throwException exceptionType="java.lang.Exception"/>
        </camel:route>
        <camel:route>
            <camel:from uri="direct:firstDestination"/>
            <camel:setBody>
                <camel:constant>First Body</camel:constant>
            </camel:setBody>
            <camel:log message="First thread: ${threadName}"/>
        </camel:route>
        <camel:route>
            <camel:from uri="direct:secondDestination"/>
            <camel:setBody>
                <camel:constant>Second Body</camel:constant>
            </camel:setBody>
            <camel:log message="Second thread: ${threadName}"/>
        </camel:route>
        <camel:route>
            <camel:from uri="direct:thirdDestination"/>
            <camel:setBody>
                <camel:constant>Third Body</camel:constant>
            </camel:setBody>
            <camel:log message="Third thread: ${threadName}"/>
        </camel:route>
        <camel:route>
            <camel:from uri="undertow:{{undertow.http}}/filtersInRout"/>
            <camel:filter>
                <camel:simple>${header.filtered} == 'true'</camel:simple>
                <camel:log message="Passed the filter."/>
                <camel:stop/>
            </camel:filter>
            <camel:log message="Did not pass the filter"/>
        </camel:route>
        <camel:route>
            <camel:from uri="undertow:{{undertow.http}}/complexFiltersInRout"/>
            <camel:filter statusPropertyName="isFiltered">
                <camel:method beanType="org.learning.camel.bean.MessageFilterBean" method="allowedOnlyUnique"/>
                <camel:log message="Passed the filter - ${body}"/>
                <camel:log message="Now with property ${exchangeProperty.isFiltered}"/>
                <camel:stop/>
            </camel:filter>
            <camel:log message="This string already exists - ${body}"/>
            <camel:log message="Now with property ${exchangeProperty.isFiltered}"/>
        </camel:route>
        <camel:route>
            <camel:from uri="undertow:{{undertow.http}}/test-endpoint"/>
            <camel:choice>
                <camel:description>We determine whether the file needs to be copied based on the "isCopied" header</camel:description>
                <camel:when>
                    <camel:simple>${header.isCopied} == 'true'</camel:simple>
                    <camel:log message="Will be saved"/>
                    <camel:toD uri="file:data/outbox/${header.Folder}"/>
                </camel:when>
                <camel:otherwise>
                    <camel:log message="Will not be saved"/>
                    <camel:stop/>
                </camel:otherwise>
            </camel:choice>
        </camel:route>
        <camel:route>
            <camel:from uri="undertow:{{undertow.http}}/routAfterChoice"/>
            <camel:choice>
                <camel:when>
                    <camel:simple>${header.isCopied} == 'true'</camel:simple>
                    <camel:log message="Will be saved"/>
                </camel:when>
                <camel:when>
                    <camel:simple>${header.isCopied} == 'false'</camel:simple>
                    <camel:log message="Will not be saved"/>
                </camel:when>
                <camel:otherwise>
                    <camel:log message="Everything is broken"/>
                    <camel:stop/>
                </camel:otherwise>
            </camel:choice>
            <camel:log message="Routing after choice"/>
        </camel:route>
        <camel:route>
            <camel:from uri="undertow:{{undertow.http}}/cb_router"/>
            <camel:choice precondition="true">
                <camel:when>
                    <camel:simple>{{?foo}}</camel:simple>
                    <camel:log message="This route for foo"/>
                    <camel:stop/>
                </camel:when>
                <camel:when>
                    <camel:simple>{{?bar}}</camel:simple>
                    <camel:log message="This route for bar"/>
                    <camel:stop/>
                </camel:when>
                <camel:otherwise>
                    <camel:log message="Otherwise rout"/>
                    <camel:stop/>
                </camel:otherwise>
            </camel:choice>
        </camel:route>
    </camel:routeContext>
</beans>